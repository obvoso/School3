package Ex;

import java.util;

interface Measurable {
	double Measurable();
	double average();
}

interface Getinfo {
	double getValue();
}

class Student implements Getinfo {
	double score;
	
	public double getValue() {
		return score;
	}
	public double average(Getinfo[] objects) {
		
	}
}

public class Ex03 {
	
	public static void main(String[] args) {
		List<Student> sArr = new List<>();
	}

}


public interface Measurable
{
   double getMeasure();       // abstract method
   
   static double getAverage(Measurable [] list)
   {  
      if (list.length == 0)            // if list is empty...
         return 0.0 ;                  // ...ain't no average
      
      double sum = 0.0 ;               // accumulates sum of measures
      
      for (Measurable object : list)   // for each Measurable object in list...
      {
         sum += object.getMeasure() ;  // ...get the measure and add to sum
      }
      return sum / list.length ;       // compute and return average
   }
   default boolean isGreaterThan(Measurable other)    
   {
      return this.getMeasure() > other.getMeasure() ;
   }   
}